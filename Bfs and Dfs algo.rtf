BFS(Graph, start):\
    create a queue Q       \
    mark start as visited\
    enqueue start into Q\
\
    while Q is not empty:\
        node \uc0\u8592  dequeue(Q)\
        process(node)   // e.g., print or store\
        for each neighbor in Graph[node]:\
            if neighbor is not visited:\
                mark neighbor as visited\
                enqueue(neighbor)\
\
DFS(Graph, start):\
    create a stack S\
    mark start as visited\
    push start into S\
\
    while S is not empty:\
        node \uc0\u8592  pop(S)\
        process(node)\
        for each neighbor in Graph[node]:\
            if neighbor is not visited:\
                mark neighbor as visited\
                push(neighbor)}
