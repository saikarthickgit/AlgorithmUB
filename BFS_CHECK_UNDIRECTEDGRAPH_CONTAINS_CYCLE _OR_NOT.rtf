 \
isCyclicUndirected_BFS(Graph G):\
    visited = set()\
\
    for each vertex v in G:\
        if v not in visited:\
            if BFS(v) == true:                               // function calling\
                return true\
    return false\
\
\
BFS(start):                                                    // recursive function\
    create queue Q\
    enqueue (start, parent = -1)\
    visited.add(start)\
\
    while Q not empty:\
        (node, parent) = dequeue(Q)\
\
        for each neighbor u of node:               // checking the node  neighbor whether they are already present in the queue or not if they are present then the graph is cycle else the graph is not  cycle\
            if u not in visited:\
                visited.add(u)\
                enqueue (u, node)         \
            else if u \uc0\u8800  parent:                                 \
                return true   # cycle found\
\
    return false\
   \
\
}
