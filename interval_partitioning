Problem:Problem:
	â€¢	We have n jobs (intervals), each with a start and finish time.
	â€¢	Goal: Assign jobs to the minimum number of resources (machines, classrooms, etc.) so that no two overlapping jobs share the same resource.

Greedy Strategy (Earliest Start Time First):
	â€¢	Process jobs in order of increasing start time.
	â€¢	Assign each job to the first available resource.

Sort intervals by their starting times
 For each job j in order:
    if there exists a resource that is free for job j then
        assign job j to that resource
     else
        allocate a new resource and assign job j to it: Sort intervals by their starting times

Time complexity : n log n --> due to sorting 

âœ… Greedy Strategy

Process jobs in order of increasing start time; assign each to the first available resource, or create a new one if needed.

ðŸ”’ Safety of the Strategy
	â€¢	Claim: Assigning a job to the first available resource is safe â€” it never forces us to use more resources than necessary.
	â€¢	Why?
	â€¢	If a job starts at time t, all resources already in use at t are occupied by jobs that overlap with it.
	â€¢	Therefore, we must assign it to a new resource if all existing ones are busy.
	â€¢	If at least one resource is free, itâ€™s always safe to put the job there, since it doesnâ€™t overlap with jobs already on that resource.

ðŸŽ¯ Correctness
	â€¢	The greedy algorithm uses exactly as many resources as the depth of the interval set (the maximum number of overlapping jobs).
	â€¢	Proof:
	â€¢	Lower bound: Any algorithm must use at least depth resources (since depth intervals overlap, and each must go to a different resource).
	â€¢	Upper bound: The greedy algorithm never uses more than depth resources, since it only allocates a new one when all currently running intervals overlap with the new one.
	â€¢	Hence, the greedy algorithm uses the minimum number of resources.
