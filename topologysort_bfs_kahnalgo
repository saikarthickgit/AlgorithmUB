**Topological Sort using BFS (Kahn’s Algorithm)**
TOPOLOGICAL-SORT-BFS(Graph G):
    Input: Directed Acyclic Graph (DAG) G = (V, E)
    Output: A topological ordering of vertices

    1. Create an array inDegree[ ] initialized with 0 for all vertices
    2. For each edge (u, v) in E:
           inDegree[v] = inDegree[v] + 1

    3. Initialize a queue Q
    4. For each vertex u in V:
           If inDegree[u] == 0:
                ENQUEUE(Q, u)

    5. Initialize an empty list topoOrder

    6. While Q is not empty:
           u = DEQUEUE(Q)
           Append u to topoOrder

           For each neighbor v of u:
                inDegree[v] = inDegree[v] - 1
                If inDegree[v] == 0:
                     ENQUEUE(Q, v)

    7. If topoOrder has all |V| vertices:
           return topoOrder
       Else:
           print("Graph has a cycle – no topological order exists")
```

---


